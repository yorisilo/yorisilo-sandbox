type token =
  | IDENT of (string)
  | EOF
  | LPAREN
  | RPAREN
  | ARROW
  | EQUIV
  | AND
  | OR
  | NOT
  | STRAY

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"

(* ここには，構文解析で利用するための
   普通のOCamlでの定義を記述する *)

(* Syntaxモジュール(syntax.ml)で定義した
   statement型を頻繁に使用するので，
   「Syntax.」を省略するためにopenしておく *)
open Term

# 26 "parser.ml"
let yytransl_const = [|
    0 (* EOF *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* ARROW *);
  261 (* EQUIV *);
  262 (* AND *);
  263 (* OR *);
  264 (* NOT *);
  265 (* STRAY *);
    0|]

let yytransl_block = [|
  257 (* IDENT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\000\000"

let yylen = "\002\000\
\002\000\001\000\003\000\003\000\003\000\003\000\003\000\002\000\
\002\000"

let yydefred = "\000\000\
\000\000\000\000\002\000\000\000\000\000\009\000\000\000\000\000\
\008\000\001\000\000\000\000\000\000\000\000\000\003\000\000\000\
\000\000\000\000\000\000"

let yydgoto = "\002\000\
\006\000\007\000"

let yysindex = "\255\255\
\002\255\000\000\000\000\002\255\002\255\000\000\001\000\020\255\
\000\000\000\000\002\255\002\255\002\255\002\255\000\000\001\255\
\001\255\252\254\009\255"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014\000\
\009\000\006\000\011\000"

let yygindex = "\000\000\
\000\000\008\000"

let yytablesize = 275
let yytable = "\001\000\
\010\000\013\000\003\000\004\000\011\000\007\000\013\000\014\000\
\004\000\005\000\006\000\008\000\009\000\005\000\013\000\014\000\
\000\000\000\000\016\000\017\000\018\000\019\000\015\000\011\000\
\012\000\013\000\014\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\011\000\012\000\013\000\014\000\
\007\000\007\000\007\000\004\000\007\000\006\000\006\000\006\000\
\005\000\000\000\005\000"

let yycheck = "\001\000\
\000\000\006\001\001\001\002\001\004\001\000\000\006\001\007\001\
\000\000\008\001\000\000\004\000\005\000\000\000\006\001\007\001\
\255\255\255\255\011\000\012\000\013\000\014\000\003\001\004\001\
\005\001\006\001\007\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\004\001\005\001\006\001\007\001\
\003\001\004\001\005\001\003\001\007\001\003\001\004\001\005\001\
\003\001\255\255\005\001"

let yynames_const = "\
  EOF\000\
  LPAREN\000\
  RPAREN\000\
  ARROW\000\
  EQUIV\000\
  AND\000\
  OR\000\
  NOT\000\
  STRAY\000\
  "

let yynames_block = "\
  IDENT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Term.wff) in
    Obj.repr(
# 36 "parser.mly"
                   ( _1 )
# 170 "parser.ml"
               : Term.wff))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 38 "parser.mly"
          ( WffAtom _1)
# 177 "parser.ml"
               : Term.wff))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Term.wff) in
    Obj.repr(
# 39 "parser.mly"
                             ( _2 )
# 184 "parser.ml"
               : Term.wff))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Term.wff) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Term.wff) in
    Obj.repr(
# 40 "parser.mly"
                                (
      let t1 = _1 in
      let t2 = _3 in
      WffAnd (WffArrow (t1, t2), WffArrow (t2, t1))
    )
# 196 "parser.ml"
               : Term.wff))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Term.wff) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Term.wff) in
    Obj.repr(
# 45 "parser.mly"
                                ( WffArrow (_1, _3))
# 204 "parser.ml"
               : Term.wff))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Term.wff) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Term.wff) in
    Obj.repr(
# 46 "parser.mly"
                             ( WffOr (_1, _3))
# 212 "parser.ml"
               : Term.wff))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Term.wff) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Term.wff) in
    Obj.repr(
# 47 "parser.mly"
                              ( WffAnd (_1, _3))
# 220 "parser.ml"
               : Term.wff))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Term.wff) in
    Obj.repr(
# 48 "parser.mly"
                   ( WffNot _2)
# 227 "parser.ml"
               : Term.wff))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Term.wff)
